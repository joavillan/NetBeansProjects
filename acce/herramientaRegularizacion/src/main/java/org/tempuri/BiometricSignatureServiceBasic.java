
package org.tempuri;

import java.net.MalformedURLException;
import java.net.URL;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.logging.Logger;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "BiometricSignatureServiceBasic", targetNamespace = "http://tempuri.org/", wsdlLocation = "https://firmabiometrica.intranet.gasnatural.com/SealSignBSSService/BiometricSignatureServiceBasic.svc?wsdl")
public class BiometricSignatureServiceBasic
    extends Service
{

    private final static URL BIOMETRICSIGNATURESERVICEBASIC_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(org.tempuri.BiometricSignatureServiceBasic.class.getName());

    static {
        URL url = null;
        disableSslVerification();
        try {
            URL baseUrl;
            baseUrl = org.tempuri.BiometricSignatureServiceBasic.class.getResource(".");
            url = new URL(baseUrl, "https://firmabiometrica.intranet.gasnatural.com/SealSignBSSService/BiometricSignatureServiceBasic.svc?wsdl");
        } catch (MalformedURLException e) {
            logger.warning("Failed to create URL for the wsdl Location: 'https://firmabiometrica.intranet.gasnatural.com/SealSignBSSService/BiometricSignatureServiceBasic.svc?wsdl', retrying as a local file");
            logger.warning(e.getMessage());
        }
        BIOMETRICSIGNATURESERVICEBASIC_WSDL_LOCATION = url;
        
    }

    private static void disableSslVerification() {
        try
        {
            // Create a trust manager that does not validate certificate chains
            TrustManager[] trustAllCerts = new TrustManager[] {new X509TrustManager() {
                @Override
				public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return null;
                }
				@Override
				public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {
					// TODO Auto-generated method stub
					
				}
				@Override
				public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {
					// TODO Auto-generated method stub
					
				}
            }
            };

            // Install the all-trusting trust manager
            SSLContext sc = SSLContext.getInstance("SSL");
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            // Create all-trusting host name verifier
            HostnameVerifier allHostsValid = new HostnameVerifier() {

				@Override
				public boolean verify(String hostname, SSLSession session) {
					// TODO Auto-generated method stub
					return true;
				}
            };

            // Install the all-trusting host verifier
            HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (KeyManagementException e) {
            e.printStackTrace();
        }
    }

    public BiometricSignatureServiceBasic(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public BiometricSignatureServiceBasic() {
        super(BIOMETRICSIGNATURESERVICEBASIC_WSDL_LOCATION, new QName("http://tempuri.org/", "BiometricSignatureServiceBasic"));
    }

    /**
     * 
     * @return
     *     returns IBiometricSignatureServiceBasic
     */
    @WebEndpoint(name = "BasicHttpBinding_IBiometricSignatureServiceBasic")
    public IBiometricSignatureServiceBasic getBasicHttpBindingIBiometricSignatureServiceBasic() {
        return super.getPort(new QName("http://tempuri.org/", "BasicHttpBinding_IBiometricSignatureServiceBasic"), IBiometricSignatureServiceBasic.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns IBiometricSignatureServiceBasic
     */
    @WebEndpoint(name = "BasicHttpBinding_IBiometricSignatureServiceBasic")
    public IBiometricSignatureServiceBasic getBasicHttpBindingIBiometricSignatureServiceBasic(WebServiceFeature... features) {
        return super.getPort(new QName("http://tempuri.org/", "BasicHttpBinding_IBiometricSignatureServiceBasic"), IBiometricSignatureServiceBasic.class, features);
    }

}
