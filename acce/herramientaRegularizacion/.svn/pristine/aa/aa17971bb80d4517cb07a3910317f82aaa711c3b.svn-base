
package com.gasnaturalfenosa.moma.validationcsv;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import javax.jws.WebService;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.ws.BindingType;
import javax.xml.ws.Holder;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.gasnaturalfenosa.common.Constantes;
import com.gasnaturalfenosa.common.IdentificationRequest;
import com.gasnaturalfenosa.common.IdentificationResponse;
import com.gasnaturalfenosa.common.ParseObjectToString;
import com.gasnaturalfenosa.message_types.validatecsv.ValidateCSVRequest;
import com.gasnaturalfenosa.message_types.validatecsv.ValidateCSVResponse;



/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.2.10-b140319.1121
 * Generated source version: 2.2
 * 
 */
@WebService(portName = "ValidationCSV", serviceName = "ValidationCSVService", targetNamespace = "http://www.gasnaturalfenosa.com/MOMA/ValidationCSV", wsdlLocation = "/wsdls/ValidationCSV.wsdl", endpointInterface = "com.gasnaturalfenosa.moma.validationcsv.ServicePortType")
@BindingType("http://schemas.xmlsoap.org/wsdl/soap/http")
public class ValidateCSVService_servicePortImpl implements ServicePortType {

	private static final Logger LOGGER = Logger.getLogger(ValidateCSVService_servicePortImpl.class);

	private String instance = "SHA-1";

	// Use only from test
	public void setInstance(String instance) {
		this.instance = instance;
	}

	/**
	 * 
	 * @param identificationRequest
	 * @param validationCSVRequest
	 * @param validationCSVResponse
	 * @param identificationResponse
	 */
	
	@Override
	public void validateCSV(IdentificationRequest identificationRequest, ValidateCSVRequest validationCSVRequest,
			Holder<IdentificationResponse> identificationResponse, Holder<ValidateCSVResponse> validationCSVResponse) {

		LOGGER.info(ParseObjectToString.getFieldNamesAndValues(identificationRequest));
		LOGGER.info(ParseObjectToString.getFieldNamesAndValues(validationCSVRequest));

		final IdentificationResponse resIdentResp = new IdentificationResponse();
		resIdentResp.setMessageId(identificationRequest.getMessageId());
		resIdentResp.setCountryCode(identificationRequest.getCountryCode());
		resIdentResp.setSectorCode(identificationRequest.getSectorCode());
		resIdentResp.setTimeStampResponse(identificationRequest.getTimeStampRequest());

		final ValidateCSVResponse resVCSVResp = new ValidateCSVResponse();
		MessageDigest m = null;
		try {
			m = MessageDigest.getInstance(instance);

			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			factory.setNamespaceAware(true);
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document document = builder.parse(new ByteArrayInputStream(validationCSVRequest.getFirmaBase64()));
			XPathFactory xPathfactory = XPathFactory.newInstance();
			XPath xpath = xPathfactory.newXPath();
			XPathExpression expr = xpath.compile("//Document");
			NodeList nl = (NodeList) expr.evaluate(document, XPathConstants.NODESET);

			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			transformer.setOutputProperty("omit-xml-declaration", "yes");
			DOMSource source = new DOMSource(nl.item(0));

			ByteArrayOutputStream bos = new ByteArrayOutputStream();
			StreamResult result = new StreamResult(bos);
			transformer.transform(source, result);
			byte[] array = bos.toByteArray();

			m.update(array);
			String digest = Base64.encodeBase64String(m.digest());
			String csvTablet = validationCSVRequest.getCsvTablet();

			resVCSVResp.setCsvServidor(digest);

			if (!digest.equals(csvTablet)) {
				LOGGER.info("Los CSV no coinciden: " + digest + " <> " + csvTablet);
				resVCSVResp.setResultadoCSV(Constantes.RESULT_FAIL);
				resIdentResp.setResult(Constantes.RESULT_FAIL);
				resIdentResp.setErrorCode(Constantes.ERROR_SERVICENNR_CSV_NOT_EQUAL);
				resIdentResp.setErrorDescription(
						Constantes.ERROR_SERVICESNNR_CSV_NOT_EQUAL_DES + digest + " distinto de " + csvTablet);

			} else {
				resVCSVResp.setResultadoCSV(Constantes.RESULT_OK);
				resIdentResp.setResult(Constantes.RESULT_OK);
			}

		} catch (NoSuchAlgorithmException e) {
			LOGGER.error(Constantes.ERROR_ALGORITMO_SHA1, e);
			resIdentResp.setResult(Constantes.RESULT_FAIL);
			resIdentResp.setErrorCode(Constantes.ERROR_VALIDATECSV);
			resIdentResp.setErrorDescription(Constantes.ERROR_EXCEPTION_SERVICESNNR_CSV + e.getMessage());
		} catch (ParserConfigurationException e) {
			LOGGER.error(Constantes.ERROR_ALGORITMO_SHA1, e);
			resIdentResp.setResult(Constantes.RESULT_FAIL);
			resIdentResp.setErrorCode(Constantes.ERROR_VALIDATECSV);
			resIdentResp.setErrorDescription(Constantes.ERROR_EXCEPTION_SERVICESNNR_CSV + e.getMessage());
		} catch (SAXException e) {
			LOGGER.error(Constantes.ERROR_ALGORITMO_SHA1, e);
			resIdentResp.setResult(Constantes.RESULT_FAIL);
			resIdentResp.setErrorCode(Constantes.ERROR_VALIDATECSV);
			resIdentResp.setErrorDescription(Constantes.ERROR_EXCEPTION_SERVICESNNR_CSV + e.getMessage());
		} catch (IOException e) {
			LOGGER.error(Constantes.ERROR_ALGORITMO_SHA1, e);
			resIdentResp.setResult(Constantes.RESULT_FAIL);
			resIdentResp.setErrorCode(Constantes.ERROR_VALIDATECSV);
			resIdentResp.setErrorDescription(Constantes.ERROR_EXCEPTION_SERVICESNNR_CSV + e.getMessage());
		} catch (TransformerException e) {
			LOGGER.error(Constantes.ERROR_ALGORITMO_SHA1, e);
			resIdentResp.setResult(Constantes.RESULT_FAIL);
			resIdentResp.setErrorCode(Constantes.ERROR_VALIDATECSV);
			resIdentResp.setErrorDescription(Constantes.ERROR_EXCEPTION_SERVICESNNR_CSV + e.getMessage());
		} catch (XPathExpressionException e) {
			LOGGER.error(Constantes.ERROR_ALGORITMO_SHA1, e);
			resIdentResp.setResult(Constantes.RESULT_FAIL);
			resIdentResp.setErrorCode(Constantes.ERROR_VALIDATECSV);
			resIdentResp.setErrorDescription(Constantes.ERROR_EXCEPTION_SERVICESNNR_CSV + e.getMessage());
		}

		identificationResponse.value = resIdentResp;
		validationCSVResponse.value = resVCSVResp;
		LOGGER.info(ParseObjectToString.getFieldNamesAndValues(identificationResponse.value));
		LOGGER.info(ParseObjectToString.getFieldNamesAndValues(validationCSVResponse.value));
	}

}
